a. new_tiles()
#This function will add new tiles to the game window when we perform any movement in game. The tiles will have either number 2 or number 4 and the new generated tiles will have different colors for both the numbers.
# ==== add new tiles in python 2048 game
def new_tiles(self):
    index = random.randint(0, 6)
    x = -1
    y = -1

    # ==== check while game is not over
    while self.full() == False:
        x = random.randint(0, 3)
        y = random.randint(0, 3)

        if (self.game_board[x][y] == 0):
            self.game_board[x][y] = self.new_random_tiles[index]
            x1 = y * 105
            y1 = x * 105
            x2 = x1 + 105 - 5
            y2 = y1 + 105 - 5
            num = self.game_board[x][y]
            if num == 2:
                self.square[x, y] = self.canvas.create_rectangle(x1, y1, x2, y2, fill="#e0f2f8", tags="rect",
                                                                 outline="", width=0)
                self.canvas.create_text((x1 + x2) / 2, (y1 + y2) / 2, font=("Arial", 36), fill="#f78a8a", text="2")
            elif num == 4:
                self.square[x, y] = self.canvas.create_rectangle(x1, y1, x2, y2, fill="#b8dbe5", tags="rect",
                                                                 outline="", width=0)
                self.canvas.create_text((x1 + x2) / 2, (y1 + y2) / 2, font=("Arial", 36), fill="#f78a8a", text="4")
            Break

b. full()
#This function will check whether all the grid in the game is full or not. It will return either True or False.

# ==== showing game board
 def show_board(self):
     cellwidth = 105
     cellheight = 105
     self.square = {}
     for column in range(4):
         for row in range(4):
             x1 = column * cellwidth
             y1 = row * cellheight
             x2 = x1 + cellwidth - 5
             y2 = y1 + cellheight - 5
             num = self.game_board[row]<div class="grid one-third"></div>
             if num == 0:
                 self.show_number0(row, column, x1, y1, x2, y2)
             else:
                 self.show_number(row, column, x1, y1, x2, y2, num)

c. show_board()
#This function will show the game board. Each number in the game window will have a separate color. The numbers in the game board are 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 and 2048.
# ==== showing game board in python 2048 game
  def show_board(self):
      cellwidth = 105
      cellheight = 105
      self.square = {}

      for column in range(4):
          for row in range(4):
              x1 = column * cellwidth
              y1 = row * cellheight
              x2 = x1 + cellwidth - 5
              y2 = y1 + cellheight - 5
              num = self.game_board[row]<div class="grid one-third"></div>
              if num == 0:
                  self.show_number0(row, column, x1, y1, x2, y2)
              else:
                  self.show_number(row, column, x1, y1, x2, y2, num)

d. show_number0()
#This function will have to show the color of the grid when there is no number on it.

# ==== show board block when it is empty
   def show_number0(self, row, column, a, b, c, d):
       self.square[row, column] = self.canvas.create_rectangle(a, b, c, d, fill="#f5f5f5", tags="rect", outline="")

e. show_number()
#This function will show the color of the grid and number as respect to the different numbers.

# ==== show board number
   def show_number(self, row, column, a, b, c, d, num):
       bg_color = {'2': '#eee4da', '4': '#ede0c8', '8': '#edc850', '16': '#edc53f', '32': '#f67c5f', '64': '#f65e3b', '128': '#edcf72', '256': '#edcc61', '512': '#f2b179', '1024': '#f59563', '2048': '#edc22e',}
       color = {'2': '#776e65', '4': '#f9f6f2', '8': '#f9f6f2', '16': '#f9f6f2', '32': '#f9f6f2', '64': '#f9f6f2', '128': '#f9f6f2', '256': '#f9f6f2', '512': '#776e65', '1024': '#f9f6f2', '2048': '#f9f6f2', }
       self.square[row, column] = self.canvas.create_rectangle(a, b, c, d, fill=bg_color[str(num)], tags="rect", outline="")
       self.canvas.create_text((a + c) / 2, (b + d) / 2, font=("Arial", 36), fill=color[str(num)], text=str(num))

f. moves()
#This function will accept the different events performed by the user and perform the movement of blocks of grid as per the event. The events given by the user are ‘UP’, ‘DOWN’, ‘LEFT’, and ‘RIGHT’.

# ==== moves by user
def moves(self, event):
    if event.keysym == 'Down':
        for j in range(0, 4):
            shift = 0
            for i in range(3, -1, -1):
                if self.game_board[i][j] == 0:
                    shift += 1
                else:
                    if i - 1 >= 0 and self.game_board[i - 1][j] == self.game_board[i][j]:
                        self.game_board[i][j] *= 2
                        self.score += self.game_board[i][j]
                        self.game_board[i - 1][j] = 0
                    elif i - 2 >= 0 and self.game_board[i - 1][j] == 0 and self.game_board[i - 2][j] == self.game_board[i][j]:
                        self.game_board[i][j] *= 2
                        self.score += self.game_board[i][j]
                        self.game_board[i - 2][j] = 0
                    elif i == 3 and self.game_board[2][j] + self.game_board[1][j] == 0 and self.game_board[0][j] == self.game_board[3][
                        j]:
                        self.game_board[3][j] *= 2
                        self.score += self.game_board[3][j]
                        self.game_board[0][j] = 0
                    if shift > 0:
                        self.game_board[i + shift][j] = self.game_board[i][j]
                        self.game_board[i][j] = 0
        self.show_board()
        self.new_tiles()
        self.game_over()
    elif event.keysym == 'Right':
        for i in range(0, 4):
            shift = 0
            for j in range(3, -1, -1):
                if self.game_board[i][j] == 0:
                    shift += 1
                else:
                    if j - 1 >= 0 and self.game_board[i][j - 1] == self.game_board[i][j]:
                        self.game_board[i][j] *= 2
                        self.score += self.game_board[i][j]
                        self.game_board[i][j - 1] = 0
                    elif j - 2 >= 0 and self.game_board[i][j - 1] == 0 and self.game_board[i][j - 2] == self.game_board[i][j]:
                        self.game_board[i][j] *= 2
                        self.score += self.game_board[i][j]
                        self.game_board[i][j - 2] = 0
                    elif j == 3 and self.game_board[i][2] + self.game_board[i][1] == 0 and self.game_board[0][j] == self.game_board[3][
                        j]:
                        self.game_board[i][3] *= 2
                        self.score += self.game_board[i][3]
                        self.game_board[i][0] = 0
                    if shift > 0:
                        self.game_board[i][j + shift] = self.game_board[i][j]
                        self.game_board[i][j] = 0
        self.show_board()
        self.new_tiles()
        self.game_over()
    elif event.keysym == 'Left':
        for i in range(0, 4):
            shift = 0
            for j in range(0, 4):
                if self.game_board[i][j] == 0:
                    shift += 1
                else:
                    if j + 1 < 4 and self.game_board[i][j + 1] == self.game_board[i][j]:
                        self.game_board[i][j] *= 2
                        self.score += self.game_board[i][j]
                        self.game_board[i][j + 1] = 0
                    elif j + 2 < 4 and self.game_board[i][j + 1] == 0 and self.game_board[i][j + 2] == self.game_board[i][j]:
                        self.game_board[i][j] *= 2
                        self.score += self.game_board[i][j]
                        self.game_board[i][j + 2] = 0
                    elif j == 0 and self.game_board[i][1] + self.game_board[i][2] == 0 and self.game_board[i][3] == self.game_board[i][
                        0]:
                        self.game_board[i][0] *= 2
                        self.score += self.game_board[i][0]
                        self.game_board[i][3] = 0
                    if shift > 0:
                        self.game_board[i][j - shift] = self.game_board[i][j]
                        self.game_board[i][j] = 0
        self.show_board()
        self.new_tiles()
        self.game_over()
    elif event.keysym == 'Up':
        for j in range(0, 4):
            shift = 0
            for i in range(0, 4):
                if self.game_board[i][j] == 0:
                    shift += 1
                else:
                    if i + 1 < 4 and self.game_board[i + 1][j] == self.game_board[i][j]:
                        self.game_board[i][j] *= 2
                        self.score += self.game_board[i][j]
                        self.game_board[i + 1][j] = 0
                    elif i + 2 < 4 and self.game_board[i + 1][j] == 0 and self.game_board[i + 2][j] == self.game_board[i][j]:
                        self.game_board[i][j] *= 2
                        self.score += self.game_board[i][j]
                        self.game_board[i + 2][j] = 0
                    elif i == 0 and self.game_board[1][j] + self.game_board[2][j] == 0 and self.game_board[3][j] == self.game_board[0][
                        j]:
                        self.game_board[0][j] *= 2
                        self.score += self.game_board[0][j]
                        self.game_board[3][j] = 0
                    if shift > 0:
                        self.game_board[i - shift][j] = self.game_board[i][j]
                        self.game_board[i][j] = 0
        self.show_board()
        self.new_tiles()
        self.game_over()
    self.game_score.set(str(self.score))
    if self.score > self.high_score:
        self.high_score = self.score
        self.highest_score.set(str(self.high_score))

g. new_game()
#This function will create a new game for the user. It will display a fresh game with the last highest score of the user.

# ==== to create new python 2048 game
def new_game(self):
    self.score = 0
    self.game_score.set("0")
    self.game_board = []
    self.game_board.append([0, 0, 0, 0])
    self.game_board.append([0, 0, 0, 0])
    self.game_board.append([0, 0, 0, 0])
    self.game_board.append([0, 0, 0, 0])
    while True:
        x = random.randint(0, 3)
        y = random.randint(0, 3)
        if (self.game_board[x][y] == 0):
            self.game_board[x][y] = 2
            break
    index = random.randint(0, 6)
    while self.full() == False:
        x = random.randint(0, 3)
        y = random.randint(0, 3)
        if (self.game_board[x][y] == 0):
            self.game_board[x][y] = self.new_random_tiles[index]
            break
    self.show_board()

h. game_over()
#This function will check for game over, it will return True if the game is over and display a new empty grid window displaying “GAME OVER”.

# ==== check for game over
  def game_over(self):
      for i in range(0, 4):
          for j in range(0, 4):
              if (self.game_board[i][j] == 2048):
                  self.game_won()
      for i in range(0, 4):
          for j in range(0, 4):
              if (self.game_board[i][j] == 0):
                  return False
      for i in range(0, 4):
          for j in range(0, 3):
              if (self.game_board[i][j] == self.game_board[i][j + 1]):
                  return False
      for j in range(0, 4):
          for i in range(0, 3):
              if self.game_board[i][j] == self.game_board[i + 1][j]:
                  return False
      gameover = [["G", "A", "M", "E", ], ["", "", "", ""], ["O", "V", "E", "R"], ["", "", "", ""]]
      cellwidth = 105
      cellheight = 105
      self.square = {}
      for column in range(4):
          for row in range(4):
              a = column * cellwidth
              b = row * cellheight
              c = a + cellwidth - 5
              d = b + cellheight - 5
              self.square[row, column] = self.canvas.create_rectangle(a, b, c, d, fill="#ede0c8", tags="rect",
                                                                      outline="")
              self.canvas.create_text((a + c) / 2, (b + d) / 2, font=("Arial", 36), fill="#494949",
                                      text=gameover[row]<div class="grid one-third"></div>)
      return True

h. game_won()
#This function will check for a game won and condition for game won is the user has to make a grid of value 2048, then it will return True and display a new empty grid window displaying “GAMEWON!”.

# ==== check for game won
def game_won(self):
    gameover = [["Y", "O", "U", "", ], ["", "", "", ""], ["W", "O", "N", "!"], ["", "", "", ""]]
    cellwidth = 105
    cellheight = 105
    self.square = {}
    for column in range(4):
        for row in range(4):
            a = column * cellwidth
            b = row * cellheight
            c = a + cellwidth - 5
            d = b + cellheight - 5
            self.square[row, column] = self.canvas.create_rectangle(a, b, c, d, fill="#ede0c8", tags="rect",
                                                                    outline="")
            self.canvas.create_text((a + c) / 2, (b + d) / 2, font=("Arial", 36), fill="#494949",
                                    text=gameover[row]<div class="grid one-third"></div>)






